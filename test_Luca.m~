clear all;
clc;

z = tf('z');

n = 3;
N = 3;
I = eye(3);

%% We need a nihilpotent A to satisfy the constraint M,N in z^-1RH_inf, L in RH_inf
A = [0 0 0;
     randi([-20,20]) 0 0;
     randi([-20,20]) randi([-20,20]) 0]
B= eye(3)
C=eye(3)


%1) Create random FIR R, Delta1, Delta3, Delta4. Ensure that FIR/strictly
%proper requirements are satisfied by using some tricks. My tricks requires A
%nihilpotent, B=C=I
%2) Check if CL = R(I+\hat{Delta})^-1 is stable.

R_tilde = tf(ones(n,n));
Delta1 = tf(ones(n,n));
Delta3 = tf(ones(n,n));
Delta4 = tf(ones(n,n));
for(i = 1:n)
    for(j = 1:n)
        for(k = 1:N-1)
            R_tilde(i,j) = R_tilde(i,j)*(z-randi([-5,5]));
            Delta1(i,j) = Delta1(i,j)*(z-randi([-5,5]));
            Delta3(i,j) = Delta3(i,j)*(z-randi([-5,5]));
            Delta4(i,j) = Delta4(i,j)*(z-randi([-5,5]));
        end
        
        %make them strictly proper. 
        R_tilde(i,j) = R_tilde(i,j)/z^N;
        Delta1(i,j) = 0*Delta1(i,j)/z^(N);
        Delta3(i,j) = 0.00000001*Delta3(i,j)/z^N;  %very small
        Delta4(i,j) = 0*Delta4(i,j)/z^N;
    end
end

Delta3 = Delta3.*I; %for simplicity, Delta3 is diagonal.

Rtf = inv(z*I-A)*(I+R_tilde)  %Trick: By defining R as such, we ensure that Mtf = R_tilde - Delta1, and so Mtf is guaranteed to lie in z^-1RH_inf and FIR. We need A nihilpotent to ensure Rtf is itself FIR.
Mtf = R_tilde - Delta1;
Ntf = Rtf * (z*I - A) - I - Delta3;
Ltf = Mtf * (z*I - A) - Delta4;

R = ss(Rtf);
M = ss(Mtf);
N = ss(Ntf);
L = ss(Ltf);


CL = minreal(ss(inv(I+Delta3+R*inv(I+Delta1)*(Delta4-(z*I-A)*Delta3))*R*inv(I+Delta1)));

fprintf('The maximum eigenvalue of CL has norm %f .\n', max(norm(eig(CL.A))))


hat_Delta = minreal(ss(Delta3 - Rtf * (z*I-A)*Delta3))
max(norm(eig(hat_Delta)))

